{"posts":[{"title":"The Reason：重启博客的原因","text":"​ 在本科的时候开了博客，但那个时候主要图个新奇，没过多久就没有维护了 ​ 今天是2023.8.21，离研二开学还有十天，暑假的时候感觉时间过得飞快，一眨眼一天天就过去了，遂产生了记录每日日常的想法，以此来勉励自己每天要有所获 ​ 同时这半年来刷了非常多的LeetCode，每道题都常有所获，开个博客也有利于记录我的学习收获 ​ 望能坚持，互勉","link":"/2023/08/21/%E9%87%8D%E5%90%AF%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E5%9B%A0/"},{"title":"8.21学习：哈希，数据链路层的协议，复习：七层OSI","text":"8.21 题目 LeetCode128题：最长连续序列给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。 请你设计并实现时间复杂度为 O(n) 的算法解决此问题。 示例 1： 123输入：nums = [100,4,200,1,3,2]输出：4解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。 示例 2： 12输入：nums = [0,3,7,2,5,8,4,6,0,1]输出：9 解法： 这道题要求我们o(n)时间复杂度解决 如果没有这个限制，暴力解法为遍历数组每个元素num，查找num+1，num+2…num+y是否在数组中 首先想到用哈希，将查找这个过程从o(n)降低到o(1) 然后考虑如果已知有一个 x, x+1, x+2, ⋯ , x+y的连续序列，而我们却重新从 x+1，x+2或者是 x+y处开始尝试匹配，那么得到的结果肯定不会优于枚举 xxx 为起点的答案，因此我们在外层循环的时候碰到这种情况跳过即可 1234567891011121314151617181920class Solution(object): def longestConsecutive(self, nums): &quot;&quot;&quot; :type nums: List[int] :rtype: int &quot;&quot;&quot; res = 0 num_set = set(nums) for num in num_set: if num-1 not in num_set: current_num = num current_res = 1 while current_num+1 in num_set: current_num += 1 current_res += 1 res = max(res, current_res) return res 总结：哈希将o (n3)降低到o(n2)，剪纸再降低到o（n） 136. 只出现一次的数字给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。 解法：线性时间复杂度想到的就是哈希 哈希两种：set()和dict() set 不考虑数量，复数个只出现一次，形式如下：{1, 2, 3} dict可以看成是数组相反，适合考虑元素数量的情况，形如：{2: 2, 1: 2, 3: 1} 1234567891011121314151617class Solution(object): def singleNumber(self, nums): &quot;&quot;&quot; :type nums: List[int] :rtype: int &quot;&quot;&quot; n = len(nums) hashtable = dict() for i in range(n): if nums[i] not in hashtable: hashtable[nums[i]] = 1 else: hashtable[nums[i]] += 1 for key in hashtable: if hashtable[key] ==1: return key 数据链路层协议以太网协议：用于封装帧地址和帧传输 PPP：链路层点到点协议 HDLC：思科用的协议 七层OSI复习应用，表示，会话，传输，网络，链路，物理","link":"/2023/08/21/8.21%20%E9%A2%98%E7%9B%AE/"},{"title":"8.22动态规划，http与https区别，情人节","text":"139. 单词拆分给你一个字符串 s 和一个字符串列表 wordDict 作为字典。请你判断是否可以利用字典中出现的单词拼接出 s 。 注意：不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。 示例 1： 123输入: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]输出: true解释: 返回 true 因为 &quot;leetcode&quot; 可以由 &quot;leet&quot; 和 &quot;code&quot; 拼接成。 示例 2： 1234输入: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]输出: true解释: 返回 true 因为 &quot;applepenapple&quot; 可以由 &quot;apple&quot; &quot;pen&quot; &quot;apple&quot; 拼接成。 注意，你可以重复使用字典中的单词。 示例 3： 12输入: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]输出: false 解法： 动态规划，令dp[i]表示字符串s前i个字符能够划分为单词，则出如下转移方程： dp[i]=dp[j] &amp;&amp; check(s[j..i−1]) 其中 check(s[j..i−1])表示子串 s[j..i−1]s[j..i-1]s[j..i−1] 是否出现在字典中。 其中dp[0] = True 代码： 1234567891011121314151617class Solution(object): def wordBreak(self, s, wordDict): &quot;&quot;&quot; :type s: str :type wordDict: List[str] :rtype: bool &quot;&quot;&quot; wordset = set(wordDict) n = len(s) dp = [False] * (n+1) dp[0] = True for i in range(1, n+1): for j in range(i): if dp[j] and s[j:i] in wordset: dp[i] = True break return dp[-1] 需注意，python切片[i : j] 表示包含i， 不包含j http和https区别https是http基础上加入SSL协议，SSL协议通过客户端与服务器端建立SSL连接，服务器端发送自己的证书，客户端CA认证后，发送自己的证书至服务器端，服务器认证通过后建立连接，确保了安全性 同时客户端还会向服务器端发送自己支持的加密协议，服务器端选择一款返回客户端，客户端产生字符串并加密发给服务器端，服务器端解密后将这个字符串作为密钥双向加密确保安全性 同时还利用连接序号来防止重放攻击 和小悦过七夕节去啦","link":"/2023/08/22/139.%20%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/"}],"tags":[],"categories":[],"pages":[]}